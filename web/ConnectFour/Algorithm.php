<?php include("../Setup/preheader.php"); ?>
<title>The Code</title>
<?php include("../Setup/header.php"); ?>
<script src="http://code.jquery.com/jquery-latest.js"></script>
<table border="0">
    <tr>
	<td id="leftcolumn">
	    <div id="leftmenu">
		<ul style="list-style: none">
		    <li style="padding-top: 15px">
			<a href="#connectfourlabel">Connect Four</a>
			<ul>
			    <li><a href="#actualcode">The Actual Code</a></li>
			    <li>
				<a href="#playstyle">Play Style</a>
				<ul>
				    <li><a href="#obvious">The Obvious Move</a></li>
				    <li><a href="#theblock">The Block</a></li>
				    <li><a href="#thetrick">The Trick</a></li>
				</ul>
			    </li>
			    <li><a href="#variables">The Variables</a></li>
				<ul>
				    <li><a href="#turnsahead">Turns Ahead</a></li>
				    <li><a href="#points">Points</a></li>
				    <li><a href="#ratio">Ratio</a></li>
				</ul>
			    <li><a href="#backstory">Backstory</a></li>
			</ul>
		    </li>
		</ul>
	    </div>
	</td><td width="3%"></td>
	<td id="rightcolumn">
	    <div id="rightcontent">
		<h1 style="text-align: center">The Algorithm</h1>
		<div style="text-align: left">
		    <h2 id="actualcode">The Actual Code</h2>
		    <div class="bodyparagraph">
			<p>
			    The base algorithm is a recursive point based system. The actual code for that 
			    part of the AI is only 32 lines, the rest is just the (inefficiently written) 
			    rules and producing the board. The final function which computes which column 
			    to move to can be found <a href="../ConnectFour/CompMoveRec.js">here</a>. There 
			    are five important inputs to the function: turns, ratio, win, tie, and loss.<br><br>
			    The algorithm creates a decision tree where each new level is generated by the next 
			    player moving in all of the available columns. 
			    At each node the board is checked for a winner and if there isn't then all available 
			    moves are made to branch into the next level. If the current player won then the 
			    value of the node is equal to "win" and if the current player lost then the value
			    is equal to "loss". In both cases the node is given a value and the tree does not 
			    go any deeper. Once the tree has reached a depth equal to "turns" nodes that have 
			    no winner are assigned a value equal to "tie".<br><br>
			    Once all leaf nodes are assigned values the branch node values are calculated. 
			    A branch node value is calculated by summing its child node values and multiplying 
			    by the value of "ratio". The values are propagated up to the first branches and the 
			    node with the highest value is chosen as the move.
			</p>
		    </div>
		    <h2 style="padding-top: 15px" id="playstyle">Play Style</h2>
		    <div class="bodyparagraph">
			<p>
			    After playing against my own AI a fair amount of time (I know, sad) and have picked 
			    up its playing style, which is a direct consequence of its programming.
			</p>
			<h3 style="padding-top: 15px" id="obvious">The Obvious Move</h3>
			<div class="bodyparagraph">
			    Before the AI runs its recursive algorithm it looks for a move that would cause it 
			    to win and goes there, so there's no use hoping it will miss that obvious move.
			</div>
			<h3 style="padding-top: 15px" id="theblock">The Block</h3>
			<div class="bodyparagraph">
			    If the computer can't win, it sure isn't going to let you. After searching for winning 
			    move it will look to block you. It does this before running the full recursive algorithm,
			    so it's much faster. You can tell it stops at this part of the code by how quickly the 
			    computer makes its move when it blocks you when playing on 5 or 6 "turns ahead".
			</div>
			<h3 style="padding-top: 15px" id="thetrick">The Trick</h3>
			<div class="bodyparagraph">
			    The classic way to beat an opponent in Connect Four is to set a trap where if they don't 
			    move somewhere you win, but if they do you win as well, and by classic way I mean the only 
			    I've ever been able to win. The problem with the AI is that it sees ahead and doesn't make 
			    setting a trap very easy. I've only beaten the level 5 AI twice, and both times it was by setting 
			    a trap <i>while having 2- and 3-in-a-rows in other places</i>. Of course I did this by 
			    accident both times, but it makes sense why it would work. Enough threats elsewhere ups the 
			    points in those columns, increasing the chance that more real threats will outweigh disrupting 
			    your trap setup. This strategy probably seems obvious: keep them occupied, set a trap, win, 
			    but not it can be quantified by points why it works. Humans make mistakes, though, which makes 
			    them easier to beat.
			</div>
		    </div>
		    <h2 style="padding-top: 15px" id="variables">But What Do The Variables Mean?</h2>
		    <div class="bodyparagraph">
			<p>
			    You may be asking yourself <i>"So now I know how the algorithm works, but what do each of them 
			    represent?"</i>. Ok, so you probably weren't thinking anything close to that, but maybe you're 
			    still interested so I'll explain anyways.
			</p>
			<h3 style="padding-top: 15px" id="turnsahead">Turns Ahead</h3>
			<div class="bodyparagraph">
			    Turns ahead represents the intelligence of the AI. The further it looks in the future the more 
			    accurately it can calculate the point value for each column, making a better move. It takes into 
			    account all moves (even letting an opponent stack four in a row without challenge) so it only 
			    roughly translates to intelligence. Nevertheless, it is still more difficult to beat an AI 
			    with a higher "turns ahead" value.
			</div>
			<h3 style="padding-top: 15px" id="points">Win, Tie, and Loss Points</h3>
			<div class="bodyparagraph">
			    The win, tie, and loss points variables represent the AI's play style. If "win points" is higher 
			    then more aggressive moves are rewarded. The AI will make moves that yield more possible wins, 
			    even if it means there are more ways to lose.<br>Higher "loss points" has the opposite <roll id="rollpoints">effect; 
			    the AI<div id="popout">Yeah, I just used a semicolon</div></roll> makes more defensive moves. 
			    A loss in the future of a move greatly reduces its point value, so the AI won't go there. 
			    The AI will move to block more than move to win.<br>Finally, there are "tie points". Higher tie 
			    points will steer the game away from anyone winning. Quite frankly I don't know what this does. 
			    My best guess is that it has the same effects as higher "loss points".
			</div>
			<h3 style="padding-top: 15px" id="ratio">Ratio</h3>
			<div class="bodyparagraph">
			    
			</div>
		    </div>
                    <h2 style="padding-top: 15px" id="backstory">Backstory</h2>
		    <div class="bodyparagraph">
			<p>
			    Enter the Winter of '11:
			    In the bitter, mild cold of Michigan I toiled away trying to find things to do. 
			    My time away from school had taken a toll on my workload and I was stranded in 
			    the unforgiving land of boredom. My friend, a student on break from school in 
			    our nation's capital, had not yet taken his finals and so was studying for much 
			    of his winter break. Following in the footsteps of the old American proverb 
			    "Misery loves warm mochas" I staved off the cold and having to spend more than
			    three consecutive hours with my family by joining him in the quite confines of 
			    a local cafe.<br>
			    There I began explore <alt id="pun" onMouseOver="Change()"></alt> I learned
			</p>
		    </div>
		</div>
	    </div>
	</td>
    </tr>
</table>
<script>
    $('#pun').html("Java.");
    var counter=0
    function Change() {
        if (counter%2==0) {
            message="Java."
        }
        else {
            message="IT'S A PUN!!"
        }
        $('#pun').html(message);
        counter++
        return true;
    }
    $(document).ready(function(){
        var rightCon=$("#rightcontent").height()
        var leftCon=$("#leftmenu").height()
        if (rightCon<leftCon) {
            $("#rightcontent").height(leftCon)
        } else {
            $("#leftmenu").height(rightCon)
        }
    });
</script>
<?php include("../Setup/footer.php"); ?>